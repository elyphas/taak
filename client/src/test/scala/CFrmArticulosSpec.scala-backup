package client_testear

import outwatch.dom._
import outwatch.dom.dsl._
import cats.effect.{IO, SyncIO}
import client_testear.Deprecated.IgnoreWarnings.initEvent
import org.scalajs.dom.{CustomEvent, Element, Event, document, html}
import org.scalatest.Tag
import spatutorial.shared.Articulo

import scala.concurrent.Await
import scala.concurrent.duration._
import manik1.modules.FrmArticulo

object GetClaveTest extends Tag("GetClaveTest")
object GetClaveTest2 extends Tag("GetClaveTest2")

import outwatch.ext.monix._
import outwatch.ext.monix.handler._ // or if you want to use our own reactive library instead of monix: import outwatch.reactive.handler._

class CFrmArticulosSpec extends JSDomSpec  {

  def sendEvent(elem: Element, eventType: String) = {
      val event = document.createEvent("Events")
      initEvent(event)(eventType, canBubbleArg = true, cancelableArg = false)
      elem.dispatchEvent(event)
  }

  val click = IO {
    val event = document.createEvent("Events")
    initEvent(event)("click", canBubbleArg = false, cancelableArg = true) //initEvent(event)("input", canBubbleArg = false, cancelableArg = true)
    event
  }

  "testing handler" should "contain an Articulo" taggedAs GetClaveTest2 in {

    val frmArtic = new FrmArticulo()
    //import frmArticulo._

    frmArtic.hdlMainItem.foreach ( println )

    frmArtic.hdlPartida.onNext("25301")
    //hdlCveArticulo.onNext("032.701.0020")
    frmArtic.hdlDescripcion.onNext("changotes")
    frmArtic.hdlUnidad.onNext("Pieza")

    for {
      _ <- OutWatch.renderInto[IO]( "#root", frmArtic.renderRaw)
      //txtClave <- IO(org.scalajs.dom.document.getElementById("txtCve.Articulo").asInstanceOf[html.Input])
      cmdSave <- IO(org.scalajs.dom.document.getElementById("cmdSearch").asInstanceOf[html.Button])
      //_ <- IO(txtClave.value = "1874")
      eventClick <- click
      _ <- IO(cmdSave.dispatchEvent( eventClick ))
    } yield {

      succeed
    }
  }

  /*"get the last clave" should "contain a string with a folio" taggedAs GetClaveTest2 in {
      val frmArticulo = new CFrmArticulo()
      import frmArticulo._

      val programa = for {
        _ <- OutWatch.renderInto[IO]( "#root", renderRaw)
      } yield {

        hdlUnidad.onNext("Pieza")
        hdlDescripcion.onNext("Ahora si esta chingon")
        hdlCveArticulo.onNext("changos monos")

        hdlArticulo.foreach { v =>
          println("Mostrar lo que tiene el          !*ยก*!*ยก*!  hdlArticulo!*ยก*!*ยก*!  ")
          println(v)
        }
        println("Campos")
        hdlCveArticulo.foreach(println)
        hdlDescripcion.foreach(println)
        hdlUnidad.foreach(println)
        succeed
      }
      programa.unsafeRunSync()
  }*/


  /*"txt in frmComparative" should "contain a string" taggedAs GetClaveTest in {
    val frm = new CFrmArticulo()

    val programa = for {
        _ <- OutWatch.renderInto[IO]( "#root",  frm.renderRaw)
        txtClave <- IO(org.scalajs.dom.document.getElementById("txtCve.Articulo").asInstanceOf[html.Input])
        cmdSave <- IO(org.scalajs.dom.document.getElementById("cmdSearch").asInstanceOf[html.Button])
        _ <- IO(txtClave.value = "1874")

        eventClick <- IO {
              val event = document.createEvent("Events")
              //initEvent(event)("input", canBubbleArg = false, cancelableArg = true)
              initEvent(event)("click", canBubbleArg = false, cancelableArg = true)
              event
        }

        _ <- IO {
            cmdSave.dispatchEvent(eventClick)
        }

        _ <- IO {
          println("mostrar lo que tiene el Handler:")
          frm.hdlArticulo.foreach { msg =>
            println(msg)
          }
        }

    } yield {
      assert(txtClave.value == "1874")
      succeed
    }
    programa.unsafeRunSync()
  }*/


  /*it should "Clickar" in {
    val but = input ( id := "clicki",
      onClick.foreach ( println ( "Clickeando en un cuadro de texto  ########################### " ) ),
      onInput.value.foreach(println ( "En el changos por fin onInput en un cuadro de texto  ########################### " ) )

    )
    OutWatch.renderInto[ IO ]("#root", but ).unsafeRunSync( )
    val element = document.getElementById ( "clicki" )
    sendEvent(element, "input")
    sendEvent(element, "change")
    sendEvent(element, "onChange")
    sendEvent(element, "click")
    sendEvent(element, "click")
  }*/

  /*"Testing the onInput event" should "print the message" in {
    val frm = new FrmComparative

    OutWatch.renderInto[IO]( "#root", frm.renderWithOutObserv ).map { _ =>
      println("Test if is triggered the onInput event")
      val txtFolio = org.scalajs.dom.document.getElementById("txtFolio")
      sendEvent(txtFolio, "input")
    }.unsafeRunSync()
  }*/

  /*"txt in frmComparative" should "contain a string" in {
    println("Probando el FrmComparativo @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ ")

    val texto = input( id:="txtFolio",
                      onInput.value.foreach( println("Changos oninput"))
                  )

    val programa = for {
      _ <- OutWatch.renderInto[IO]( "#root", texto )
      txtFolio <- IO(org.scalajs.dom.document.getElementById ( "txtFolio" ) )
      _ <- IO(txtFolio.textContent = "1874")
      event <- IO {
                    val event = document.createEvent("Events")
                    initEvent(event)("change", canBubbleArg = false, cancelableArg = true)
                    event
                }
      _ <- IO {
                  println ( "is suppose to trigger the event onInput" )
                  sendEvent ( txtFolio, "onchange")
                  txtFolio.dispatchEvent( event )
              }
    } yield succeed
    programa.unsafeRunSync()
  }*/

  /*it should "be able to render basic handler" in {
    val counter: VDomModifier = button(
      id := "click",
      Handler.create[Int](0).map { handler =>
        VDomModifier(onClick(handler.map(_ + 1)) --> handler, handler)
      }
    )

    val vtree = div(counter)

    OutWatch.renderInto[IO]("#app", vtree).map { _ =>
      val element = document.getElementById("click")

      element.innerHTML shouldBe "0"

      sendEvent(element, "click")
      element.innerHTML shouldBe "1"

      sendEvent(element, "click")

      println(s"El valor de element.innerHTML: ${element.innerHTML}")

      element.innerHTML shouldBe "2"
    }
  }*/

}